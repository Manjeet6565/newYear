import { useState, useEffect } from "react";
import Confetti from "react-confetti";
import { toPng } from "html-to-image";
import "bootstrap/dist/css/bootstrap.min.css";
import "./App.css";

function App() {
  const [name, setName] = useState("");
  const [currentWish, setCurrentWish] = useState("");
  const [styleIndex, setStyleIndex] = useState(0);
  const [countdown, setCountdown] = useState("");
  const [showConfetti, setShowConfetti] = useState(false);

  // Array of card styles
  const cardStyles = [
    {
      backgroundImage: "linear-gradient(135deg, #FF7E5F, #FEB47B)",
      color: "#fff",
    },
    {
      backgroundImage: "linear-gradient(135deg, #6a11cb, #2575fc)",
      color: "#fff",
    },
    {
      backgroundImage: "linear-gradient(135deg, #00c6ff, #0072ff)",
      color: "#fff",
    },
    {
      backgroundImage: "linear-gradient(135deg, #f1c40f, #e67e22)",
      color: "#fff",
    },
  ];

  // Array of sentences
  const sentences = [
    "рдпрд╣ рд╕рд╛рд▓ рдЖрдкрдХреЗ рдЬреАрд╡рди рдореЗрдВ рдЕрдкрд╛рд░ рдЦреБрд╢рд┐рдпрд╛рдВ рдФрд░ рд╕рдлрд▓рддрд╛ рд▓реЗрдХрд░ рдЖрдПред",
    "рдЖрдкрдХреЗ рд╕рднреА рд╕рдкрдиреЗ рд╕рд╛рдХрд╛рд░ рд╣реЛрдВ рдФрд░ рдЬреАрд╡рди рдореЗрдВ рдирдИ рдКрдВрдЪрд╛рдЗрдпреЛрдВ рдХреЛ рдЫреВрдПрдВред",
    "рдпрд╣ рдирдпрд╛ рд╕рд╛рд▓ рдЖрдкрдХреЗ рдФрд░ рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд▓рд┐рдП рд╕рдореГрджреНрдзрд┐ рдФрд░ рд╕реБрдЦ рд▓реЗрдХрд░ рдЖрдПред",
    "рдЖрдкрдХрд╛ рд╣рд░ рджрд┐рди рдирдИ рдКрд░реНрдЬрд╛ рдФрд░ рдкреНрд░реЗрд░рдгрд╛ рд╕реЗ рднрд░рд╛ рд╣реЛред",
  ];

  // Countdown Timer
  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
      const newYear = new Date("January 1, 2025 00:00:00");
      const diff = newYear - now;

      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
      const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
      const minutes = Math.floor((diff / (1000 * 60)) % 60);
      const seconds = Math.floor((diff / 1000) % 60);

      setCountdown(
        `${days} Days, ${hours} Hours, ${minutes} Minutes, ${seconds} Seconds`
      );
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  // Greeting based on time
  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "рд╕реБрдкреНрд░рднрд╛рдд! рдЖрдкрдХрд╛ рджрд┐рди рд╢реБрдн рд╣реЛред";
    if (hour < 18) return "рдирдорд╕реНрдХрд╛рд░! рдпрд╣ рджреЛрдкрд╣рд░ рдЕрджреНрднреБрдд рд╣реЛред";
    return "рд╢реБрдн рд╕рдВрдзреНрдпрд╛! рдпрд╣ рд╢рд╛рдо рдЦреБрд╢рд┐рдпреЛрдВ рд╕реЗ рднрд░реА рд╣реЛред";
  };

  const handleInputChange = (e) => {
    setName(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (name.trim()) {
      setCurrentWish(name); // Set the new name
      setStyleIndex((prevIndex) => (prevIndex + 1) % cardStyles.length); // Change card style and sentence
      setShowConfetti(true); // Trigger confetti
      setTimeout(() => setShowConfetti(false), 3000); // Stop confetti after 3 seconds
      setName(""); // Clear input field
    }
  };

  const downloadCard = () => {
    const card = document.getElementById("generated-card");
    toPng(card).then((dataUrl) => {
      const link = document.createElement("a");
      link.download = "NewYearCard.png";
      link.href = dataUrl;
      link.click();
    });
  };

  return (
    <div
      className="container mt-5 text-center bg-light p-4 rounded shadow-lg"
      style={{
        minHeight: "100vh",
        background: "linear-gradient(to bottom, #e0c3fc, #8ec5fc)",
      }}
    >
      <h1 className="mb-4 text-warning">ЁЯОЙ Happy New Year 2025! ЁЯОЙ</h1>
      <p className="text-muted">{getGreeting()}</p>
      <p
        className="text-warning"
        style={{
          background: "linear-gradient(90deg, #FF5F6D, #FFC371)",
          WebkitBackgroundClip: "text",
          color: "transparent",
          fontWeight: "bold",
          fontSize: "1.5rem",
        }}
      >
        тП│ New Year Countdown: {countdown}
      </p>

      <form onSubmit={handleSubmit} className="mb-4">
        <div className="input-group mb-3">
          <input
            type="text"
            className="form-control form-control-lg"
            placeholder="рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ"
            value={name}
            onChange={handleInputChange}
            style={{
              borderRadius: "25px",
              padding: "15px",
              fontSize: "18px",
              boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
            }}
          />
          <button
            type="submit"
            className="btn btn-lg btn-success"
            style={{
              borderRadius: "25px",
              padding: "10px 20px",
              fontSize: "18px",
              boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.2)",
            }}
          >
            Generate Card
          </button>
        </div>
      </form>

      {currentWish && (
        <div
          id="generated-card"
          className="card mx-auto p-4 fade-in shadow-lg"
          style={{
            ...cardStyles[styleIndex],
            borderRadius: "25px",
            maxWidth: "100%",
            boxShadow: "0px 6px 15px rgba(0, 0, 0, 0.3)",
          }}
        >
          <h2 className="card-title text-white">ЁЯОК рдирдпрд╛ рд╕рд╛рд▓ рдореБрдмрд╛рд░рдХ рд╣реЛ! ЁЯОК</h2>
          <p className="card-text text-white">
            <strong>{currentWish}</strong>, {sentences[styleIndex]}
          </p>
          <p className="text-muted mt-3">-- рдордиреЛрдЬ рдХреА рддрд░рдл рд╕реЗ ЁЯТЦ</p>
        </div>
      )}

      {currentWish && (
        <button onClick={downloadCard} className="btn btn-warning mt-3">
          Download Card
        </button>
      )}

      {showConfetti && <Confetti />}
    </div>
  );
}

export default App;
